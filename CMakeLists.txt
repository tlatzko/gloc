# <Copyright Holder>. Copyright (C) <Copyright Year(s)>. <License>.

#
# Project Properties
#
CMAKE_MINIMUM_REQUIRED (VERSION 2.6.2)
PROJECT (gloc)
SET (APPLICATION_NAME "GLOC")
SET (APPLICATION_CODENAME "{GLOC}")
SET (APPLICATION_COPYRIGHT_YEARS "2014")
SET (APPLICATION_VERSION_MAJOR 0)
SET (APPLICATION_VERSION_MINOR 1)
SET (APPLICATION_VERSION_PATCH 0)
SET (APPLICATION_VERSION_TYPE SNAPSHOT)
SET (APPLICATION_VERSION_STRING "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}-${APPLICATION_VERSION_TYPE}")
SET (APPLICATION_VENDOR_ID "edu.kit")
SET (APPLICATION_VENDOR_NAME "Karlsruhe institute of technology")
SET (APPLICATION_VENDOR_URL "kit.edu")
SET (APPLICATION_ID "${APPLICATION_VENDOR_ID}.${PROJECT_NAME}")

#
# Optional settings from the main folder
#
set(BUILD_PYTHON ON CACHE BOOL "BUILD Python extension")

#
# Debugging Options
#
SET (CMAKE_VERBOSE_MAKEFILE 0) # Use 1 for debugging, 0 for release

#
# Project Output Paths
#
SET (MAINFOLDER ${PROJECT_SOURCE_DIR})
SET (EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")
SET (LIBRARY_OUTPUT_PATH "${MAINFOLDER}/lib")
SET (ASSETSFOLDER "${MAINFOLDER}/shared")

#
# Project Search Paths
#
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/tools")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/thirdparty")
SET (CMAKE_MODULE_PATH "${MAINFOLDER}/tools/share/cmake")


SET (EXTRA_INCLUDES)
SET (EXTRA_INCLUDES ${EXTRA_INCLUDES} /usr/local/include)
SET (EXTRA_INCLUDES ${EXTRA_INCLUDES} ${PROJECT_SOURCE_DIR}/include)
SET (EXTRA_INCLUDES ${EXTRA_INCLUDES} ${PROJECT_SOURCE_DIR}/thirdparty/include)

message(STATUS "extra includes are ${EXTRA_INCLUDES}")

include_directories(${EXTRA_INCLUDES})



#
# Compiler settings
#

set(USE_OPENMP ON CACHE BOOL "openmp flag set")
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")


set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg") 
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
# set profiler
set(OPTIMIZE TRUE)
if(OPTIMIZE)
  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
else(OPTIMIZE)
    message("DEBUG")
  set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb")
endif(OPTIMIZE)

set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D__GXX_EXPERIMENTAL_CXX0X__=1")
    

if(USE_OPENMP)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
endif(USE_OPENMP)    




#
# Configure Files
#
FILE (GLOB_RECURSE CONFIGINPUTS1 include/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS2 include/*.h.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS3 src/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS4 src/*.h.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS5 test/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS6 test/*.h.in.cmake)
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS1}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS2}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS3}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS4}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS5}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS6}")
FOREACH (CONFIGINPUT ${CONFIGINPUTS})
    STRING (REPLACE ".in.h.cmake" ".h" CONFIGOUTPUT1 "${CONFIGINPUT}")
    STRING (REPLACE ".h.in.cmake" ".h" CONFIGOUTPUT2 "${CONFIGOUTPUT1}")
    CONFIGURE_FILE ("${CONFIGINPUT}" "${CONFIGOUTPUT2}")
ENDFOREACH (CONFIGINPUT ${CONFIGINPUTS})

#
# Add Build Targets
#

# Add thirdparty directories first!
ADD_SUBDIRECTORY(thirdparty/gmock-1.7.0)
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(apps)
ADD_SUBDIRECTORY(test)
ADD_SUBDIRECTORY(bench)

if(BUILD_PYTHON)

    CONFIGURE_FILE(setup.py.in)
    ADD_SUBDIRECTORY(python)
endif(BUILD_PYTHON)

#
# Add Install Targets
#
IF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")
    INSTALL(DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}" DESTINATION "include")
ENDIF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")


#
# Add Documentation Targets
#
INCLUDE (DocumentationTargets)
